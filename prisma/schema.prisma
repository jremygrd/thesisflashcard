generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cards {
  id           String         @id @default(dbgenerated())
  question     String?
  tip          String?
  bad_options  String[]
  answer       String[]
  fk_user      String?
  users        users?         @relation(fields: [fk_user], references: [id])
  answerofcard answerofcard[]
  cards_stacks cards_stacks[]
  cards_users  cards_users[]
}

model cards_stacks {
  id         String  @id @default(dbgenerated())
  fk_cardid  String?
  fk_stackid String?
  cards      cards?  @relation(fields: [fk_cardid], references: [id])
  stacks     stacks? @relation(fields: [fk_stackid], references: [id])
}

model keywords {
  id              String            @id @default(dbgenerated())
  keyword         String?
  keywords_stacks keywords_stacks[]
}

model keywords_stacks {
  id           String    @id @default(dbgenerated())
  fk_keywordid String?
  fk_stackid   String?
  keywords     keywords? @relation(fields: [fk_keywordid], references: [id])
  stacks       stacks?   @relation(fields: [fk_stackid], references: [id])
}

model rights {
  id      String  @id @default(dbgenerated())
  type    String?
  stack   String?
  fk_user String?
  users   users?  @relation(fields: [fk_user], references: [id])
}

model scores {
  id      String  @id @default(dbgenerated())
  fk_user String?
  stack   String?
  users   users?  @relation(fields: [fk_user], references: [id])
}

model stacks {
  id              String            @id @default(dbgenerated())
  title           String?
  color           String?
  emoji           String?
  description     String?
  fk_user         String?
  users           users?            @relation(fields: [fk_user], references: [id])
  cards_stacks    cards_stacks[]
  exam_list       exam_list[]
  keywords_stacks keywords_stacks[]
  stack_list      stack_list[]
}

model users {
  id                   String         @id
  name                 String?
  email                String?
  rights               Int?
  answerofcard         answerofcard[]
  cards                cards[]
  cards_users          cards_users[]
  exam                 exam[]
  resultofdeck         resultofdeck[]
  rights_rightsTousers rights[]
  scores               scores[]
  stack_list           stack_list[]
  stacks               stacks[]
}

model answerofcard {
  id             String    @id @default(dbgenerated())
  status         Boolean?
  date           DateTime?
  answerinputted Json?
  fk_card        String?
  fk_user        String?
  cards          cards?    @relation(fields: [fk_card], references: [id])
  users          users?    @relation(fields: [fk_user], references: [id])
}

model resultofdeck {
  id      String  @id @default(dbgenerated())
  fk_user String?
  users   users?  @relation(fields: [fk_user], references: [id])
}

model cards_users {
  nbgood    Int?
  nbbad     Int?
  streak    Int?
  nbgoodct  Int?
  nbbadct   Int?
  streakct  Int?
  diff      Float?
  lasttried Int?
  score     Float?
  score_ct  Float?
  fk_card   String
  fk_user   String
  cards     cards  @relation(fields: [fk_card], references: [id])
  users     users  @relation(fields: [fk_user], references: [id])

  @@id([fk_card, fk_user])
}

model exam {
  id           String      @id @default(dbgenerated())
  fk_userid    String?
  exam_date    Int?
  next_session Int?
  seuil        Float?
  title        String?
  users        users?      @relation(fields: [fk_userid], references: [id])
  exam_list    exam_list[]
}

model stack_list {
  id         String  @id @default(dbgenerated())
  fk_userid  String?
  fk_stackid String?
  stacks     stacks? @relation(fields: [fk_stackid], references: [id])
  users      users?  @relation(fields: [fk_userid], references: [id])
}

model exam_list {
  id         String  @id @default(dbgenerated())
  fk_examid  String?
  fk_stackid String?
  exam       exam?   @relation(fields: [fk_examid], references: [id])
  stacks     stacks? @relation(fields: [fk_stackid], references: [id])
}
